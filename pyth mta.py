# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f101pFx0fQf5OU32JYWJ4aFz2Y_ht0Su
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('MTA_Daily_Ridership.csv')
df

print("Original column names:")
print(df.columns.tolist())

df.rename(columns={'Subways: Total Estimated Ridership':'Subway_Ridership','Subways: % of Comparable Pre-Pandemic Day':'Subway_Recovery','Buses: Total Estimated Ridership':'Bus_Ridership','Buses: % of Comparable Pre-Pandemic Day':'Bus_Recovery','LIRR: Total Estimated Ridership':'LIRR_Ridership','LIRR: % of Comparable Pre-Pandemic Day':'LIRR_Recovery','Metro-North: Total Estimated Ridership':'MetroNorth_Ridership','Metro-North: % of Comparable Pre-Pandemic Day':'MetroNorth_Recovery','Access-A-Ride: Total Scheduled Trips':'AccessAR_ide_Trips','Access-A-Ride: % of Comparable Pre-Pandemic Day':'AccessARide_Recovery','Bridges and Tunnels: Total Traffic':'BridgeTunnel_Traffic','Bridges and Tunnels: % of Comparable Pre-Pandemic Day':'BridgeTunnel_Recovery','Staten Island Railway: Total Estimated Ridership':'StatenIsland_Ridership','Staten Island Railway: % of Comparable Pre-Pandemic Day':'StatenIsland_Recovery'}, inplace=True)
print("\nUpdated column names:")
print(df.columns.tolist())

df.head(10)

print(df.describe())

df["Subway_Ridership"].unique()

df["Bus_Ridership"].unique()

df["LIRR_Ridership"].unique()

df["MetroNorth_Ridership"].unique()

df["AccessAR_ide_Trips"].unique()

df["BridgeTunnel_Traffic"].unique()

df["StatenIsland_Ridership"].unique()

df.shape

df.info()

df.describe().T

for col in df.columns:
  print(col,":",df[col].nunique())

mean_df= df.select_dtypes(include=['int64']).mean()
mean_df

print("Numer of duplicate rows : ",
df.duplicated().sum())
df.drop_duplicates(inplace=True)
print("Duplicated rows removed. New shape : ",df.shape)

null_counts = df.isnull().sum()
print(null_counts)

print("Checking for null values in the dataset:")
null_counts = df.isnull().sum()
print(null_counts)
print("Checking for null values in the dataset:")
null_counts = df.isnull().sum()
print(null_counts)

numeric_cols = df.select_dtypes(include=['int64','float64']).columns
for col in numeric_cols:
  if df[col].isnull().sum() > 0:
    df[col].fillna(df[col].mean(), inplace=True)

categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
  if df[col].isnull().sum() > 0:
    df[col]. fillna(df[col].mode()[0], inplace=True)

print("\nAfter handling null values:")
print(df.isnull().sum())

print("\nStatistical summary of the dataset:")
print(df.describe())

df['Date'] = pd.to_datetime(df['Date'])
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

import seaborn as sns
plt.figure(figsize=(14, 10))
correlation_matrix = df.select_dtypes(include=['int64','float64']).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f",linewidths=0.5)
plt.title('Correation Heatmap of Transit Ridership Data')
plt.tight_layout()
plt.show()

ridership_cols = ['Subway_Ridership','Bus_Ridership','LIRR_Ridership','MetroNorth_Ridership','StatenIsland_Ridership']
yearly_avg = df.groupby('Year')[ridership_cols].mean()
plt.figure(figsize=(12, 8))
yearly_avg.T.plot(kind='bar')
plt.yscale('log')
plt.title('Average Daily Riership by Year')
plt.ylabel('Average Ridership')
plt.xlabel('Transit Mode')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show

pct_cols = [col for col in df.columns if '% of Comparable' in col]
plt.figure(figsize=(15, 10))

for i, col in enumerate(pct_cols, 1):
    plt.subplot(3, 3, i)
    plt.hist(df[col], bins=20, edgecolor='black')
    plt.title(col.split(':')[0])
    plt.xlabel('Percent of Pre-Pandemic Level')
    plt.ylabel('Frequency')

plt.tight_layout()
plt.savefig('recvery_histograms.png')
plt.close()

def detect_outliers_iqr(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)][column]

    print(f"Outlier Analysis for {column}:")
    print(f"Number of outliers: {len(outliers)}")
    print(f"Outlier percentage: {(len(outliers) / len(df[column])) * 100:.2f}%")
    print(f"IQR: {IQR}")
    print(f"Lower bound: {lower_bound}")
    print(f"Upper bound: {upper_bound}")
    print(f"Min value: {df[column].min()}")
    print(f"Max value: {df[column].max()}")
    print("\n")

    return outliers

plt.figure(figsize=(15, 10))
boxplot = df[ridership_cols].boxplot(vert=False, grid=False)
plt.title('Box Plot of Ridership Data')
plt.tight_layout()
plt.savefig('ridership_boxplot.png')
plt.show

subway_outliers = detect_outliers_iqr(df, 'Subway_Ridership')

def detect_outliers_zscore(df, column, threshold=3):
    mean = df[column].mean()
    std = df[column].std()
    z_scores = abs((df[column] - mean) / std)
    outliers = df[z_scores > threshold][column]

    print(f"Z-Score Outlier Analysis for {column}:")
    print(f"Number of outliers (|z| > {threshold}): {len(outliers)}")
    print(f"Outlier percentage: {(len(outliers) / len(df[column])) * 100:.2f}%")
    print(f"Min z-score: {z_scores.min()}")
    print(f"Max z-score: {z_scores.max()}")
    print("\n")

    return outliers

subway_z_outliers = detect_outliers_zscore(df,'Subway_Ridership')

def perform_ttest(sample1, sample2):
    mean1 = np.mean(sample1)
    mean2 = np.mean(sample2)
    var1 = np.var(sample1, ddof=1)
    var2 = np.var(sample2, ddof=1)
    n1 = len(sample1)
    n2 = len(sample2)
    t_stat = (mean1 - mean2) / np.sqrt((var1 / n1) + (var2 / n2))
    df_numerator = ((var1 / n1) + (var2 / n2)) ** 2
    df_denominator = ((var1 / n1) ** 2 / (n1 - 1)) + ((var2 / n2) ** 2 / (n2 - 1))
    df = df_numerator / df_denominator

    return t_stat, df

early_period = df[df['Year'] < 2022]['Subway_Ridership']
later_period = df[df['Year'] >= 2022]['Subway_Ridership']

t_stat, df_value = perform_ttest(early_period, later_period)

print("\nT-Test Results for Subway Ridership Comparison:")
print(f"Early period (pre-2022) mean: {early_period.mean():.2f}")
print(f"Later period (2022+) mean: {later_period.mean():.2f}")
print(f"t-statistic: {t_stat:.4f}")
print(f"Approximate degrees of freedom: {df_value:.2f}")
print("For interpretation: If |t-statistic| > 2, there is likely a significant difference")
print(
    f"Result: There is {'likely' if abs(t_stat) > 2 else 'unlikely to be'} a statistically significant difference between the two periods")

print("\nCovariance Matrix:")
cov_matrix = df[ridership_cols].cov()
print(cov_matrix)

plt.figure(figsize=(10, 8))
plt.scatter(df['Subway_Ridership'],
            df['Bus_Ridership'])
plt.title('Relationship Between Subway and Bus Ridership')
plt.xlabel('Subway Ridership')
plt.ylabel('Bus Ridership')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show

monthly_avg = df.groupby(['Year', 'Month'])[ridership_cols].mean().reset_index()

plt.figure(figsize=(15, 8))
for year in monthly_avg['Year'].unique():
    year_data = monthly_avg[monthly_avg['Year'] == year]
    plt.plot(year_data['Month'], year_data['Subway_Ridership'],
             marker='o', label=f'Year {year}')

plt.title('Monthly Trend of Subway Ridership')
plt.xlabel('Month')
plt.ylabel('Average Daily Ridership')
plt.xticks(range(1, 13))
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show

print("Analysis completed successfully!")

explode = [0,0,0,0,0]
total_means=df[['Subway_Ridership','Bus_Ridership','LIRR_Ridership','MetroNorth_Ridership','StatenIsland_Ridership']].mean()

plt.figure(figsize=(8, 8))
plt.pie(total_means,labels=total_means.index,autopct='%1.1f%%',startangle=140,explode=explode)
plt.title('Distribution of Average Daily Ridership by Transit Mode')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df['Subway_Ridership'],bins=30,color='skyblue',edgecolor='black')
plt.title('Distribution of Subway Ridership')
plt.xlabel('Subway Ridership')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()